参考文献「わかばちゃんと学ぶGit使い方入門」

Gitがないと生きていけない人間になるぞ

GitとGitHubの違い

Git
・ファイルの変更履歴を記録できるバージョン管理システム

GitHub
・Gitをつかったチーム開発をより便利にするためのWebサービス
・チームみんなのコミュニケーションの場
  ・自分が描いたコードを提案
  ・お互いのコードをレビュー
  ・メンバーの意見を取り入れプロダクトをブラッシュアップできる

Bitbucket
・GitHubと同じくWebサービス（デザイン等の違い）

SourceTree
・GitはCUIで操作するがそれを直感的に操作できるソフト


※手動でバックアップとっていた編集ファイルやディレクトリをGitを使うと楽にバックアップされ好きに戻ることができる
↓
結論：楽なんだ

でも、結局は　バージョン管理システム


１人で使ってもみんなで１つのファイルを編集したとしても、Gitを使えば楽なんだ。


まとめ
・Gitはバージョン管理システム
・変更のたびにバックアップをとれる
・好きなバックアップに戻れる
・複数人での修正を合体できる


GitHubやBitbucketはWebサービス
・コミュニケーションをとりながら使える
  SNSを使う気分でコーディングを楽しむ
・ソーシャルコーディング
  世界中の人々が描いたコードを見ることができる
  （オープンソース・コード）
・ホスティングサービス
  GitHub（無料で公開リポジトリ）
  Bitbucket（無料で未公開リポジトリ（５人まで））
  など


まとめ
・GitHubやBitbucketはGit管理しているバックアップ先になるサービス
・単なるファイル置き場ではなく、コミュニケーションの場


Gitを使いますが、初心者ですぅ

１人で使う練習。
SourceTreeというソフトを使うとよいぞ

（別にGitはそのままインストールしても使えるけどGUIなので初心者にはSourceTreeで）

SourceTreeをインストールするとGitも一緒にインストールされているのですぐ使えます！

※SSHキーとは、リモートサーバーとパソコンとの通信を暗号化するために使う文字列のこと


SourceTreeをインストしました！（結構前から
しかし次は何すんの？

リポジトリを作ろう！！
→リポジトリって？
貯蔵庫のこと（過去の状態を記憶できる。

例）
前のほうがよかったなと編集後になった場合
リポジトリから引っ張ってくることにより戻すことができる

管理できるファイル
・ソースコード
・画像
・エクセル、ワード
・３Dモデルデータ
ほかにもいろいろ

リポジトリは１分ほどでできるらしい

手元のPCのリポジトリのことをローカルリポジトリと呼ぶ

試しにドキュメントにsampleでも作りますか


まとめ
・リポジトリ＝貯蔵庫
・リポジトリにされてるディレクトリ内のファイルは.gitファイルがある。


変更の記録の仕方
1.作業する
2.ステージする（作業台に乗せる
3.コミットする

ステージに置くって２度デマじゃね？
いくつもの変更時にこれだけをコミットしたいときとかに使える！！

コミットメッセージが必要な理由
「いつだれが何を変更したのかが必要だから」
自動的に出されるわけではない


チェックアウトしてみよう
「バックアップに戻ってみよう！」

チェックアウトすると指定した時点の変更に戻る（作業ディレクトリにリロードされる）

※ブランチのTREEの右側に書いてあるコミットの英数字列はコミットIDの最初の７列
（これがあるからみんなで編集もできるらしい）


実はバージョン管理システムには

＿集中型と分散型がある。
・集中型（CVS、Subversionなど
・分散型（Git、Mercurialなど

集中型
  一つのリポジトリに接続しみんなで使う
  すべての操作はネットワークに接続された状態で行われる
  コミットは即時、中央リポジトリに反映

分散型
  各自PC上にリポジトリを持ち好きなタイミングで同期する
  コミットを整理し、好きなタイミングで同期できる
  PC同士やサーバー同士でつなぐことができる

分散型のメリット
  ・オフラインで仕事か可能
  ・影響がでないので個人で色々試せる
  ・いざとなったとき開発環境の復元も簡単に行える

まとめ
・集中型は「一つのリポジトリに接続しみんなで使う」
・分散型は「中央のリポジトリをみんなのPCにクローンして好きなタイミングで同期」


※１人で作業をするときはPushとPullがいらないようです
（GitHubもつかわない。）


そろそろ複数デモできるようならなきゃ
他人のリポジトリをフォークしてからクローンして

まとめ
・フォークとは他人の公開しているリモートリポジトリを自分のアカウントにコピーできる機能のこと
・クローンとは、リモートリポジトリをローカルにコピーにできる機能のこと


ブランチ（並行世界）
同時並行で作業するときに便利な機能

Gitにおけるブランチとは、（中略）単にコミットを指す軽量なポインタにすぎない。

ポインタとは現在地（今ここの地点）のこと

コミットが増え積み重なると今ここが移動していく

ブランチの移動にチェックアウトを使う（ダブルクリック）
任意のコミットへ自分を移動


masterブランチとは、最初から存在するブランチで「本流」みたいな意味を持つ
基本的にmastarブランチには、本番用の最新ソースコードが保たれればいい


ブランチを統合（マージ）

例）
ウェブサイトを公開しながら
バグ修正と新機能の追加を並行で行うと
ブランチを分けます。

それぞれが完成や修正完了したら、マージでmastarブランチに取り込む


よし、今までの流れを
リモートリポジトリに反映するには？

Pushすればいいんです！

今の状態だとGitHubには変更が反映されていないので反映させましょうか
Push＝押す　アップロードに近い感じ


次はPull＝ほかの人のコミットを取り込む
ダウンロードしてローカルリポジトリに反映したいとき　Pull



コンフリクトが起きたら？
マージができないときの対処法も伝授しておこう

同じ個所が同じタイミングに違う修正をうけたら？
どっちを優先しましょうか・コンフリクト（衝突）
↓
Gitがコンフリクトした行を印付けて教えてくれるから
修正してコミットしなおすのみ

